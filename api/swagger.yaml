swagger: "2.0"
info:
  description: "Dissertation project - MSc Computer Science."
  version: "1.0.0"
  title: "Diabetes Backend API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "ec20107@qmul.ac.uk"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:4000"
basePath: "/api/v1"
tags:
  - name: "medication"
    description: "Medication information for diabetes treatment."
  - name: "patient"
    description: "Basic patient information."
  - name: "treatment"
    description: "The medication treatment for a patient."
schemes:
  - "https"
  - "http"
paths:
  /medications:
    get:
      tags:
        - "medication"
      summary: "Get the list of medications"
      description: "Get the list of medications registered in the system. If the name query parameter is supplied, it will perform a lookup."
      produces:
        - "application/json"
      parameters:
        - name: "name"
          in: "query"
          description: "The medication name"
          required: false
          type: "string"
      responses:
        "200":
          description: "List of medications"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Medication"
  /medications/{medicationId}:
    get:
      tags:
        - "medication"
      summary: "Get a single medication result based on an ID"
      produces:
        - "application/json"
      parameters:
        - name: "medicationId"
          in: "path"
          description: "ID of medication to return"
          required: true
          type: "string"
      responses: 
        "200":
          description: "A single medication"
          schema: 
            $ref: "#/definitions/Medication"
  /patients:
    get:
      tags:
        - "patient"
      summary: "Get the list of registered patients"
      description: "Get the list of registered patients. If the name query parameter is supplied, it will search patients by name or email."
      produces:
        - "application/json"
      parameters:
        - name: "name"
          in: "query"
          description: "Patient name or email"
          required: false
          type: "string"
      responses: 
        "200":
          description: "List of patients"
          schema: 
            type: "array"
            items: 
              $ref: "#/definitions/Patient"
  /patients/{patientId}:
    get:
      tags:
        - "patient"
      summary: "Get a single patient given an ID"
      produces:
        - "application/json"
      parameters:
        - name: "patientId"
          in: "path"
          description: "ID of the patient to return"
          required: true
          type: "string"
      responses: 
        "200":
          description: "A single patient"
          schema: 
            $ref: "#/definitions/Patient"
  /patients/{patientId}/treatments/{treatmentId}:
    get:
      tags:
        - "treatment"
      summary: "Get a specific medication treatment for a patient. It includes the date and dosage for possible multiple medications."
      produces:
        - "application/json"
      parameters:
        - name: "patientId"
          in: "path"
          description: "ID of the patient to return"
          required: true
          type: "string"
        - name: "treatmentId"
          in: "path"
          description: "ID of the patient's treatment to return"
          required: true
          type: "string"
      responses: 
        "200":
          description: "A single medication treatment entry for a patient."
          schema: 
            $ref: "#/definitions/PatientTreatment"
  /pet:
    post:
      tags:
        - "pet"
      summary: "Add a new pet to the store"
      description: ""
      operationId: "addPet"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Pet"
      responses:
        "405":
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
    put:
      tags:
        - "pet"
      summary: "Update an existing pet"
      description: ""
      operationId: "updatePet"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Pet"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
        "405":
          description: "Validation exception"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /pet/{petId}:
    post:
      tags:
        - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "petId"
          in: "path"
          description: "ID of pet that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "name"
          in: "formData"
          description: "Updated name of the pet"
          required: false
          type: "string"
        - name: "status"
          in: "formData"
          description: "Updated status of the pet"
          required: false
          type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
    delete:
      tags:
        - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "petId"
          in: "path"
          description: "Pet id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /store/order:
    post:
      tags:
        - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "order placed for purchasing the pet"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Medication:
    type: "object"
    properties:
      id:
        type: "string"
        example: "92be6243-8e85-46b1-aa96-c9948ebbed99"
      name:
        type: "string"
        example: "Exenatide"
      brandNames:
        type: "array"
        items:
          type: "string"
          example:
            - "Byetta"
            - "Bydureon"
      description:
        type: "string"
        example: "Binds to, and activates, the GLP-1 receptor to increase insulin secretion, suppresses glucagon secretion, and slows gastric emptying."
      drugAdministrationRoute:
        type: "string"
        example: "Injection"
    required:
      - "id"
      - "name"
      - "brandNames"
      - "description"
      - "drugAdministrationRoute"
  Patient:
    type: "object"
    properties:
      id:
        type: "string"
        example: "fb85c38d-5ea5-4263-ba00-3b9528d4c4b3"
      alexaUserId:
        type: "string"
        example: "78860fa4-ec3a-4c2c-a0cf-c06a363f927b"
      accessToken:
        type: "string"
        example: "3d7a29c6ca5d4ed58fa153bcdc9f2fa3"
      firstName:
        type: "string"
        example: "John"
      lastName:
        type: "string"
        example: "Doe"
      email:
        type: "string"
        example: "j.doe@gmail.com"
  PatientTreatment:
    type: "object"
    properties:
      id:
        type: "string"
        example: "3ca91535-8f78-4bc8-b8ca-f95b21d23c8c"
      patientId:
        type: "string"
        example: "fb85c38d-5ea5-4263-ba00-3b9528d4c4b3"
      date:
        type: "string"
        example: "2021-06-20T13:49:51.141Z"
      nextAppointment:
        type: "string"
        example: "2021-07-15T13:49:51.141Z"
      medication:
        type: "array"
        items:
          $ref: "#/definitions/MedicationDosage"
  MedicationDosage:
    type: "object"
    properties:
      id:
        type: "string"
        example: "abba836c-2103-44e9-ac6b-823d886a5ddf"
      medicationId:
        type: "string"
        example: "92be6243-8e85-46b1-aa96-c9948ebbed99"
      dose:
        type: "string"
        example: "5"
      doseUnit:
        type: "string"
        example: "grams"
      frequency:
        type: "string"
        description: "RRULE based string. Should be valid against Alexa rules"
        example: "FREQ=DAILY;INTERVAL=1;COUNT=14"
      indications:
        type: "string"
        example: "Inject one dose at least one hour before a meal."
      createReminder:
        type: "boolean"
        example: true
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
          - "placed"
          - "approved"
          - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Pet:
    type: "object"
    required:
      - "name"
      - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
          - "available"
          - "pending"
          - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"